# Copyright (c) [2020] SUSE LLC
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2 of the GNU General Public License as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, contact SUSE LLC.
#
# To contact SUSE LLC about this file by physical or electronic mail, you may
# find current contact information at www.suse.com.

require_relative "../../spec_helper"

require "cwm/rspec"
require "registration/widgets/checkbox_list"
require "registration/widgets/item_details"
require "registration/widgets/master_detail_selector"

describe Registration::Widgets::MasterDetailSelector do
  subject { described_class.new(controller) }

  let(:controller) do
    double(
      items:           [item],
      include_filter?: include_filter,
      filter:          filter,
      filter_label:    filter_label,
      find_item:       nil,
      master_options:  {},
      detail_options:  {}
    )
  end

  let(:item) do
    double(
      id:          1,
      label:       "Fake item",
      status:      :whatever,
      description: "Fake addon item",
      enabled:     true
    )
  end

  let(:include_filter) { true }
  let(:filter) { true }
  let(:filter_label) { "Click here to filter the list" }

  describe "#contents" do
    it "contains a CheckboxList widget" do
      found = subject.contents.nested_find { |w| w.is_a?(Registration::Widgets::CheckboxList) }

      expect(found).to_not be_nil
    end

    it "contains a ItemDetails widget" do
      found = subject.contents.nested_find { |w| w.is_a?(Registration::Widgets::ItemDetails) }

      expect(found).to_not be_nil
    end

    context "when filter should be included" do
      it "contains a CheckBox with proper label" do
        found = subject.contents.nested_find { |w| w.is_a?(Yast::Term) && w.value == :CheckBox }

        expect(found).to_not be_nil

        # The label of a CheckBox is in the third param, index 2
        expect(found.params[2]).to eq(filter_label)
      end

      context "and it should be selected" do
        it "contains a selected CheckBox" do
          found = subject.contents.nested_find { |w| w.is_a?(Yast::Term) && w.value == :CheckBox }

          # The selected value is the fourth CheckBox param, index 3
          expect(found.params[3]).to eq(true)
        end
      end

      context "and it should not be selected" do
        let(:filter) { false }

        it "contains an unselected CheckBox" do
          found = subject.contents.nested_find { |w| w.is_a?(Yast::Term) && w.value == :CheckBox }

          # The selected value is the fourth CheckBox param, index 3
          expect(found.params[3]).to eq(false)
        end
      end
    end
  end

  describe "#handle" do
    let(:master_widget) { instance_double(Registration::Widgets::CheckboxList) }
    let(:detail_widget) { instance_double(Registration::Widgets::ItemDetails) }

    before do
      allow(controller).to receive(:toggle_item_selection)
      allow(controller).to receive(:filter=)

      allow(Registration::Widgets::CheckboxList).to receive(:new).and_return(master_widget)
      allow(Registration::Widgets::ItemDetails).to receive(:new).and_return(detail_widget)

      allow(master_widget).to receive(:update)

      allow(detail_widget).to receive(:enable)
      allow(detail_widget).to receive(:update)
      allow(detail_widget).to receive(:reset)
    end

    context "when a :filter event is catched" do
      let(:event) { { "ID" => :filter } }

      it "updates the master widget" do
        expect(master_widget).to receive(:update)

        subject.handle(event)
      end

      it "resets the detail widget" do
        expect(detail_widget).to receive(:reset)

        subject.handle(event)
      end

      it "triggers the filter action" do
        expect(controller).to receive(:filter=)

        subject.handle(event)
      end
    end

    context "when a #checkbox# action is catched" do
      context "with a valid item id" do
        before do
          allow(controller).to receive(:find_item).and_return(item)
        end

        context "and the action was generated by a click in the item label" do
          let(:event) { { "ID" => "FAKE-ITEM-ID#checkbox#label" } }

          it "enables the detail widget" do
            expect(detail_widget).to receive(:enable)

            subject.handle(event)
          end

          it "updates the detail widget with the item desription" do
            expect(detail_widget).to receive(:update).with(item.description)

            subject.handle(event)
          end

          it "does not toggle the item selection" do
            expect(controller).to_not receive(:toggle_item_selection)

            subject.handle(event)
          end

          it "does not update the master widget" do
            expect(master_widget).to_not receive(:update)

            subject.handle(event)
          end
        end

        context "and the action was generated by a click in the item checkbox" do
          let(:event) { { "ID" => "FAKE-ITEM-ID#checkbox#input" } }

          it "enables the detail widget" do
            expect(detail_widget).to receive(:enable)

            subject.handle(event)
          end

          it "updates the detail widget with the item desription" do
            expect(detail_widget).to receive(:update).with(item.description)

            subject.handle(event)
          end

          it "toggles the item selection" do
            expect(controller).to receive(:toggle_item_selection).with(item)

            subject.handle(event)
          end

          it "updates the master widget" do
            expect(master_widget).to receive(:update)

            subject.handle(event)
          end
        end
      end

      # FIXME: this is not expected, but...
      context "but the item id is NOT valid" do
        let(:event) { { "ID" => "UNKNOWN-ITEM#checkbox#input" } }

        it "does nothing" do
          expect(master_widget).to_not receive(:update)
          expect(detail_widget).to_not receive(:update)

          subject.handle(event)
        end
      end
    end
  end
end
